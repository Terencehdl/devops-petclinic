name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - develop
      - feature/Gitops

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: 'eu-west-3'
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Build with Maven
        run: ./mvnw clean install -P buildDocker

      - name: Run Unit Tests
        run: mvn --batch-mode --errors --fail-at-end --show-version test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: List Docker images
        run: docker images
        
      - name: Tag and Push Docker images to ECR
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest 
        run: |
          images=("springcommunity/spring-petclinic-api-gateway" \
                  "springcommunity/spring-petclinic-discovery-server" \
                  "springcommunity/spring-petclinic-config-server" \
                  "springcommunity/spring-petclinic-visits-service" \
                  "springcommunity/spring-petclinic-vets-service" \
                  "springcommunity/spring-petclinic-customers-service" \
                  "springcommunity/spring-petclinic-admin-server")
          for image in "${images[@]}"; do
            if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^${image}:.*"; then
              echo "Tagging and pushing image for $image"
              image_name=$(echo ${image} | awk -F '/' '{print $2}')
              docker tag ${image}:latest ${{ secrets.ECR_REPOSITORY }}/${image_name}:${IMAGE_TAG}
              docker push ${{ secrets.ECR_REPOSITORY }}/${image_name}:${IMAGE_TAG}
            else
              echo "No image found for $image"
            fi
          done
